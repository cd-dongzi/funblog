//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// config.prisma
//

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

//
// category.prisma
//

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  alias String @unique
  posts Post[]
}

//
// comment.prisma
//

model Comment {
  id        Int      @id @default(autoincrement())
  path      String
  content   String   @db.Text
  status    String   @default("pending")
  createdAt DateTime @default(now())

  type          String?
  userId        Int
  user          User    @relation(fields: [userId], references: [id], name: "commentUser")
  replierUserId Int?
  replierUser   User?   @relation(fields: [replierUserId], references: [id], name: "commentReplierUser")

  parentId Int?
  parent   Comment?  @relation("comments", fields: [parentId], references: [id])
  children Comment[] @relation("comments")

  // 文章
  postId Int?
  post   Post? @relation(fields: [postId], references: [id])

  // 页面
  pageId Int?
  page   Page? @relation(fields: [pageId], references: [id])
}

//
// image.prisma
//

model Image {
  id           Int      @id @default(autoincrement())
  originalname String
  filename     String
  originalUrl  String
  url          String
  thumbnailUrl String?
  metadata     Json
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
}

//
// invitationCode.prisma
//

model InvitationCode {
  id        Int      @id @default(autoincrement())
  // 标识
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime
  roles     Role[]

  user   User @relation("createInvitationCodes", fields: [userId], references: [id])
  userId Int

  registerUsers User[] @relation("registerInvitationCode")
}

//
// link.prisma
//

model Link {
  id        Int      @id @default(autoincrement())
  title     String
  desc      String
  url       String
  logo      String   @db.Text
  type      String
  visible   Boolean  @default(true)
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

//
// page.prisma
//

model PageMenu {
  id        Int      @id @default(autoincrement())
  type      String   @unique()
  data      Json
  createdAt DateTime @default(now())
}

model Page {
  id            Int        @id @default(autoincrement())
  title         String     @unique
  alias         String     @unique
  content       String     @db.LongText
  summary       String?
  cover         String?
  enableComment Boolean    @default(true)
  encrypted     Boolean    @default(false)
  password      String?
  userLikes     UserLike[]
  userReads     UserRead[]
  userComments  Comment[]
  user          User       @relation(fields: [userId], references: [id])
  userId        Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

//
// permission.prisma
//

model Permission {
  id              Int              @id @default(autoincrement())
  // 名称
  name            String           @db.VarChar(255)
  // 标识
  code            String?          @unique @db.VarChar(255)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

//
// post.prisma
//

model Post {
  id            Int        @id @default(autoincrement())
  title         String     @unique
  alias         String     @unique
  content       String     @db.LongText
  summary       String?    @db.Text
  cover         String?
  priority      Int        @default(1)
  enableComment Boolean    @default(true)
  encrypted     Boolean    @default(false)
  password      String?
  visible       Boolean    @default(false)
  github        String?
  tags          Tag[]
  categories    Category[]
  userLikes     UserLike[]
  userReads     UserRead[]
  userComments  Comment[]
  user          User?      @relation(fields: [userId], references: [id])
  userId        Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

//
// role.prisma
//

model RolePermission {
  id           Int         @id @default(autoincrement())
  role         Role?       @relation(fields: [roleId], references: [id])
  roleId       Int?
  permissionId Int?
  permission   Permission? @relation(fields: [permissionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([permissionId, roleId])
  @@index([roleId])
  @@index([permissionId])
}

model Role {
  id        Int       @id @default(autoincrement())
  // 名称
  name      String    @db.VarChar(255)
  // 类型
  code      String    @unique @db.VarChar(255)
  // 创建时间
  createdAt DateTime? @default(now())
  // 编辑时间
  updatedAt DateTime? @updatedAt

  rolePermissions RolePermission[]
  userRoles       UserRole[]
  invitationCodes InvitationCode[]
}

//
// site.prisma
//

model SiteConfig {
  id     Int    @id @default(autoincrement())
  type   String @unique
  config Json
}

// model SiteMeta {
//   id          Int      @id @default(autoincrement())
//   title       String
//   keywords    String   @db.VarChar(255)
//   description String   @db.VarChar(255)
//   favicon     String   @db.VarChar(255)
//   logo        String   @db.VarChar(255)
//   footerLinks Json
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model SiteImage {
//   id              Int     @id @default(autoincrement())
//   enableWebp      Boolean @default(true)
//   webpThreshold   Int
//   enableThumbnail Boolean @default(true)
//   thumbnailWidth  Int
//   storageStrategy String
// }

//
// svg.prisma
//

model Svg {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  content   String   @db.LongText
  scope     Json?
  desc      String?
  createdAt DateTime @default(now())
}

//
// tag.prisma
//

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  alias String @unique
  posts Post[]
}

//
// user.prisma
//

model User {
  id              Int        @id @default(autoincrement())
  username        String     @unique @db.VarChar(32)
  email           String?    @unique
  password        String?    @db.VarChar(255)
  ip              String?    @db.VarChar(64)
  userAgent       String?    @db.Text
  phone           String?    @db.VarChar(20)
  avatar          String?
  url             String?
  admin           Int?       @default(0)
  // 性别 1=>男 2=>女 3=>未知
  sex             Int?       @default(3)
  // 状态 1=>正常 2=>停用
  status          Int        @default(1)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  images          Image[]
  posts           Post[]
  comments        Comment[]  @relation("commentUser") // 用户作为评论人的评论
  repliedComments Comment[]  @relation("commentReplierUser") // 用户作为回复人的评论
  userRoles       UserRole[]
  userLikes       UserLike[]
  userReads       UserRead[]
  pages           Page[]

  createInvitationCodes InvitationCode[] @relation("createInvitationCodes")
  invitationCode        InvitationCode?  @relation("registerInvitationCode", fields: [invitationCodeId], references: [code])
  invitationCodeId      String?
}

model UserRole {
  id Int @id @default(autoincrement())

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id])
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
  @@index([roleId])
  @@index([userId])
}

model UserLike {
  id        Int      @id @default(autoincrement())
  ip        String
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  page      Page?    @relation(fields: [pageId], references: [id])
  pageId    Int?
}

model UserRead {
  id        Int      @id @default(autoincrement())
  ip        String
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  page      Page?    @relation(fields: [pageId], references: [id])
  pageId    Int?
}

//
// visitor.prisma
//

model Visitor {
  id        Int      @id @default(autoincrement())
  ip        String   @unique @db.VarChar(64)
  userAgent String?  @db.Text
  country   String?
  province  String?
  city      String?
  isp       String?
  system    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
